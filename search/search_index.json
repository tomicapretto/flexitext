{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Flexitext is a Python library that makes it easier to draw text with multiple styles in Matplotlib. This library is inspired and influenced by the R package <code>ggtext</code>.</p>"},{"location":"#installation","title":"Installation","text":"<p>Flexitext requires a working Python interpreter (3.6+). This library can be installed using pip:</p> <pre><code>pip install flexitext\n</code></pre> <p>Alternatively, you can install the development version from GitHub:</p> <pre><code>pip install git+https://github.com/tomicapretto/flexitext.git\n</code></pre> <p>Flexitext only requires Matplotlib version 3.4 or higher.</p>"},{"location":"#overview","title":"Overview","text":"<p>Albeit being inspired on ggtext, Flexitext does not use HTML, CSS, or Markdown to specify text styles. On the contrary, it implements a tag-based styling that looks similar to HTML tags, but is not exactly like HTML. These formatted strings consist of three components:</p> <ul> <li>An opening tag that defines the styles to apply.</li> <li>The text to be styled.</li> <li>A closing tag, indicating the extent to which the styles in the opening tag apply.</li> </ul> <p>Let's see an example:</p> <pre><code>\"&lt;color:blue, size:16&gt;This is blue text&lt;/&gt; and this is regular text\"\n</code></pre> <ul> <li><code>&lt;color:blue, size:16&gt;</code> is the opening tag. Styles are key-value pairs separated by <code>:</code>. Multiple styles are separated by commas.</li> <li><code>This is blue text</code> is the text block. This text is going to be drawn using a font size of 16 and blue color.</li> <li><code>&lt;/&gt;</code> is the closing tag. Only the text within the opening and the closing tags is formatted.</li> </ul> <p>And finally we have <code>and this is regular text</code>. This is going to be drawn using the default style because it is not contained within any formatting tags.</p>"},{"location":"#examples","title":"Examples","text":"<p>The easiest way to use <code>flexitext</code> is through the <code>flexitext</code> function.</p> <pre><code>import matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom flexitext import flexitext\n\nmpl.rcParams['figure.facecolor'] = 'w'\n</code></pre> <pre><code>fig, ax = plt.subplots(figsize=(9, 6))\n\ntext = \"Normal text\"\nax.text(0.5, 0.7, text, size=24, ha=\"center\")\n\ntext = \"&lt;weight:bold, size:24&gt;Bold text&lt;/&gt;\"\nflexitext(0.5, 0.6, text, ha=\"center\")\n\ntext = \"&lt;style:italic, size:24&gt;Italic text&lt;/&gt;\"\nflexitext(0.5, 0.5, text, ha=\"center\")\n\ntext = \"&lt;weight:bold, size:24&gt;Bold and&lt;/&gt; &lt;style:italic, size:24&gt;italic too!&lt;/&gt;\"\nflexitext(0.5, 0.4, text, ha=\"center\");\n</code></pre> <p></p> <p>Styles can be nested</p> <pre><code>fig, ax = plt.subplots(figsize=(9, 6))\n\ntext = \"&lt;size:28, color:royalblue&gt;It is much &lt;weight:bold&gt;easier &lt;/&gt;&lt;style:italic&gt;now&lt;/&gt;&lt;/&gt;\"\nflexitext(0.5, 0.6, text, ha=\"center\");\n</code></pre> <p></p> <p>A more convoluted example:</p> <pre><code>text = (\n    \"&lt;size:28, color:blueviolet, name:Montserrat&gt;You can write using\\n&lt;/&gt;\"\n    \"&lt;color:grey, size:24&gt;multiple formats,\\nand linebreaks\\n\\n\"\n    \"&lt;color:royalblue, name:Montserrat&gt;also &lt;weight:bold&gt;bold text\\n\\n&lt;/&gt;&lt;/&gt;\"\n    \"&lt;name:Montserrat&gt;and why not &lt;color:royalblue, style:italic&gt;italics&lt;/&gt; too&lt;/&gt;&lt;/&gt;\"\n)\n\nfig, ax = plt.subplots(figsize=(9, 6))\nflexitext(0.5, 0.5, text, ha=\"center\", ma=\"center\");\n</code></pre> <p></p> <p>Use the figure fraction coordinates to write a formatted title.</p> <pre><code>fig, ax = plt.subplots(figsize=(9, 6))\nfig.subplots_adjust(top=0.8, left=0.025)\n\nx = [1, 2, 3]\ny_blue = [2, 2.7, 4.5]\ny_red = [1, 3, 2.5]\n\n\nax.scatter(x, y_blue, color=\"royalblue\", s=120)\nax.scatter(x, y_red, color=\"crimson\", s=120)\n\n# Add flexitext\ntext = (\n    \"&lt;name:Montserrat&gt;&lt;size:24&gt;A &lt;weight:bold&gt;great chart&lt;/&gt; showing&lt;/&gt;\\n\"\n    \"&lt;size:18&gt;the values for the \"\n    \"&lt;color:royalblue, weight:bold&gt;blues&lt;/&gt; and the &lt;color:crimson, weight:bold&gt;reds&lt;/&gt;&lt;/&gt;&lt;/&gt;\"\n)\nflexitext(0.025, 0.8, text, va=\"bottom\", xycoords=\"figure fraction\");\n</code></pre> <p></p>"},{"location":"#notes","title":"Notes","text":"<p>Flexitext only supports the following styles</p> <ul> <li>alpha</li> <li>backgroundcolor</li> <li>color</li> <li>family</li> <li>name</li> <li>size</li> <li>style</li> <li>weight</li> </ul> <p>See Matplotlib's documentation for more information about their meaning and available values.</p> <p>Flexitext logo is created with Flexitext and Matplotlib (see here).</p>"},{"location":"#related-work","title":"Related work","text":"<ul> <li>highlight_text: Flexitext and highlight_text have similar goals. This library, highlight_text, allows you to customize more aspects of the highlighted text, such as the bounding box of the text or the border of the text with path effects. On the other hand, it requires you to pass a styles as a separated list of dictionaries instead of within the text. </li> </ul>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/FlexiText/","title":"FlexiText","text":"<p>Handle storing and drawing of formatted text.</p> <p>Parameters:</p> Name Type Description Default <code>texts</code> <code>tuple or list of flexitext.Text instances</code> <p>These objects represent the text together with their styles.</p> <code>()</code> Source code in <code>flexitext/flexitext.py</code> <pre><code>class FlexiText:\n    \"\"\"Handle storing and drawing of formatted text.\n\n    Parameters\n    ----------\n\n    texts : tuple or list of flexitext.Text instances\n        These objects represent the text together with their styles.\n    \"\"\"\n\n    HORIZONTAL_ALIGNMENT = {\"center\": 0.5, \"left\": 0, \"right\": 1}\n    VERTICAL_ALIGNMENT = {\"center\": 0.5, \"top\": 1, \"bottom\": 0}\n\n    def __init__(self, *texts):\n        self.texts = texts\n\n    def plot(\n        self,\n        x,\n        y,\n        ha=\"left\",\n        va=\"center\",\n        ma=\"left\",\n        mva=\"baseline\",\n        xycoords=\"axes fraction\",\n        ax=None,\n    ):\n        \"\"\"Draw text with multiple formats.\n\n        Parameters\n        ----------\n        x : float\n            The horizontal position to place the text. By default, this is in axes fraction\n            coordinates.\n        y : float\n            The vertical position to place the text. By default, this is in axes fraction\n            coordinates.\n        ha : str\n            Horizontal alignment. Must be one of `'center'`, `'right'`, or `'left'`.\n        va : str\n            Horizontal alignment. Must be one of `'center'`, `'top'`, or `'bottom'`.\n        ma : str\n            Alignment for multiline texts. The layout of the bounding box of all the lines is\n            determined by the `ha` and `va` properties. This property controls the alignment of the\n            text lines within that box.\n        mva : str\n            Vertical alignment for text within multiline texts. Can be one of `\"top\"`, `\"bottom\"`,\n            `\"left\"`, `\"right\"`, `\"center\"`, or `\"baseline\"`. Defaults to `\"baseline\"`.\n        xycoords : str\n            The coordinate system for `x` and `y`. Must be one of `'data'`, `'axes fraction'`, or\n            `'figure fraction'`.\n        ax : matplotlib.axes.Axes\n            Matplotlib `Axes`. The default value means the `Axes` is obtained with `plt.gca()`\n\n        Returns\n        -------\n        annotation_box : matplotlib.offsetbox.AnnotationBbox\n        \"\"\"\n\n        if ax is None:\n            ax = plt.gca()\n        if xycoords in (\"axes fraction\", \"data\"):\n            parent = ax\n        elif xycoords == \"figure fraction\":\n            parent = ax.figure\n            xycoords = ax.figure.transFigure\n        else:\n            raise ValueError(\n                \"'xycoords' must be one of 'data', 'axes fraction' or 'figure fraction', \"\n                f\"not {xycoords}\"\n            )\n\n        offsetbox = self._make_offset_box(ma, mva)\n        box_alignment = self._make_box_alignment(ha, va)\n        annotation_box = AnnotationBbox(\n            offsetbox,\n            (x, y),\n            xycoords=xycoords,\n            frameon=False,\n            box_alignment=box_alignment,\n            pad=0,\n        )\n\n        parent.add_artist(annotation_box)\n        return annotation_box\n\n    def _make_box_alignment(self, ha, va):\n        \"\"\"Convert `ha` and `va` to a touple of two numbers\"\"\"\n        ha = self.HORIZONTAL_ALIGNMENT[ha]\n        va = self.VERTICAL_ALIGNMENT[va]\n        return (ha, va)\n\n    def _make_offset_box(self, mha, mva):\n        \"\"\"Create grid with formatted text\"\"\"\n        return make_text_grid(self.texts, mha, mva)\n</code></pre>"},{"location":"reference/FlexiText/#flexitext.flexitext.FlexiText.plot","title":"<code>plot(x, y, ha='left', va='center', ma='left', mva='baseline', xycoords='axes fraction', ax=None)</code>","text":"<p>Draw text with multiple formats.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The horizontal position to place the text. By default, this is in axes fraction coordinates.</p> required <code>y</code> <code>float</code> <p>The vertical position to place the text. By default, this is in axes fraction coordinates.</p> required <code>ha</code> <code>str</code> <p>Horizontal alignment. Must be one of <code>'center'</code>, <code>'right'</code>, or <code>'left'</code>.</p> <code>'left'</code> <code>va</code> <code>str</code> <p>Horizontal alignment. Must be one of <code>'center'</code>, <code>'top'</code>, or <code>'bottom'</code>.</p> <code>'center'</code> <code>ma</code> <code>str</code> <p>Alignment for multiline texts. The layout of the bounding box of all the lines is determined by the <code>ha</code> and <code>va</code> properties. This property controls the alignment of the text lines within that box.</p> <code>'left'</code> <code>mva</code> <code>str</code> <p>Vertical alignment for text within multiline texts. Can be one of <code>\"top\"</code>, <code>\"bottom\"</code>, <code>\"left\"</code>, <code>\"right\"</code>, <code>\"center\"</code>, or <code>\"baseline\"</code>. Defaults to <code>\"baseline\"</code>.</p> <code>'baseline'</code> <code>xycoords</code> <code>str</code> <p>The coordinate system for <code>x</code> and <code>y</code>. Must be one of <code>'data'</code>, <code>'axes fraction'</code>, or <code>'figure fraction'</code>.</p> <code>'axes fraction'</code> <code>ax</code> <code>Axes</code> <p>Matplotlib <code>Axes</code>. The default value means the <code>Axes</code> is obtained with <code>plt.gca()</code></p> <code>None</code> <p>Returns:</p> Name Type Description <code>annotation_box</code> <code>AnnotationBbox</code> Source code in <code>flexitext/flexitext.py</code> <pre><code>def plot(\n    self,\n    x,\n    y,\n    ha=\"left\",\n    va=\"center\",\n    ma=\"left\",\n    mva=\"baseline\",\n    xycoords=\"axes fraction\",\n    ax=None,\n):\n    \"\"\"Draw text with multiple formats.\n\n    Parameters\n    ----------\n    x : float\n        The horizontal position to place the text. By default, this is in axes fraction\n        coordinates.\n    y : float\n        The vertical position to place the text. By default, this is in axes fraction\n        coordinates.\n    ha : str\n        Horizontal alignment. Must be one of `'center'`, `'right'`, or `'left'`.\n    va : str\n        Horizontal alignment. Must be one of `'center'`, `'top'`, or `'bottom'`.\n    ma : str\n        Alignment for multiline texts. The layout of the bounding box of all the lines is\n        determined by the `ha` and `va` properties. This property controls the alignment of the\n        text lines within that box.\n    mva : str\n        Vertical alignment for text within multiline texts. Can be one of `\"top\"`, `\"bottom\"`,\n        `\"left\"`, `\"right\"`, `\"center\"`, or `\"baseline\"`. Defaults to `\"baseline\"`.\n    xycoords : str\n        The coordinate system for `x` and `y`. Must be one of `'data'`, `'axes fraction'`, or\n        `'figure fraction'`.\n    ax : matplotlib.axes.Axes\n        Matplotlib `Axes`. The default value means the `Axes` is obtained with `plt.gca()`\n\n    Returns\n    -------\n    annotation_box : matplotlib.offsetbox.AnnotationBbox\n    \"\"\"\n\n    if ax is None:\n        ax = plt.gca()\n    if xycoords in (\"axes fraction\", \"data\"):\n        parent = ax\n    elif xycoords == \"figure fraction\":\n        parent = ax.figure\n        xycoords = ax.figure.transFigure\n    else:\n        raise ValueError(\n            \"'xycoords' must be one of 'data', 'axes fraction' or 'figure fraction', \"\n            f\"not {xycoords}\"\n        )\n\n    offsetbox = self._make_offset_box(ma, mva)\n    box_alignment = self._make_box_alignment(ha, va)\n    annotation_box = AnnotationBbox(\n        offsetbox,\n        (x, y),\n        xycoords=xycoords,\n        frameon=False,\n        box_alignment=box_alignment,\n        pad=0,\n    )\n\n    parent.add_artist(annotation_box)\n    return annotation_box\n</code></pre>"},{"location":"reference/Style/","title":"Style","text":"<p>Style container</p> <p>Stores values for the styles that can be applied to texts.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; style = Style(color='blue', size=18, alpha=0.6)\n&gt;&gt;&gt; text = style(\"This is blue text\")\n</code></pre> Source code in <code>flexitext/style.py</code> <pre><code>class Style:\n    \"\"\"Style container\n\n    Stores values for the styles that can be applied to texts.\n\n    Examples\n    --------\n    &gt;&gt;&gt; style = Style(color='blue', size=18, alpha=0.6)\n    &gt;&gt;&gt; text = style(\"This is blue text\")\n    \"\"\"\n\n    def __init__(\n        self,\n        alpha=None,\n        backgroundcolor=None,\n        bbox=None,\n        color=None,\n        family=None,\n        name=None,\n        size=None,\n        style=None,\n        weight=None,\n    ):\n        self.alpha = alpha\n        self.bbox = bbox\n        self.backgroundcolor = backgroundcolor\n        self.color = color\n        self.family = family\n        self.name = name\n        self.size = size\n        self.style = style\n        self.weight = weight\n\n        self._backgroundcolor = None\n\n    @property\n    def props(self):\n        return {k: v for k, v in self.__dict__.items() if v is not None}\n\n    # Kid of hacky, but at least it works.\n    @property\n    def backgroundcolor(self):\n        return self._backgroundcolor\n\n    @backgroundcolor.setter\n    def backgroundcolor(self, value):\n        self._backgroundcolor = None\n        if value:\n            # NOTE: These could be configurable in the future\n            self.bbox = {\"pad\": 0, \"lw\": 0, \"fc\": value}\n\n    def __eq__(self, other):\n        if not isinstance(other, type(self)):\n            return False\n        return self.__dict__ == other.__dict__\n\n    def __call__(self, string):\n        \"\"\"Return a Text instance using styles from this object.\"\"\"\n        return Text(string, self)\n\n    def __repr__(self):\n        specs = [f\"{k}={v}\" for k, v in self.props.items()]\n\n        if sum(len(s) for s in specs) &lt; 100:\n            arg = \", \".join(specs)\n        else:\n            arg = spacify(multilinify(specs)) + \"\\n\"\n\n        return f\"{self.__class__.__name__}({arg})\"\n</code></pre>"},{"location":"reference/Style/#flexitext.style.Style.__call__","title":"<code>__call__(string)</code>","text":"<p>Return a Text instance using styles from this object.</p> Source code in <code>flexitext/style.py</code> <pre><code>def __call__(self, string):\n    \"\"\"Return a Text instance using styles from this object.\"\"\"\n    return Text(string, self)\n</code></pre>"},{"location":"reference/Text/","title":"Text","text":"<p>Stores content and styles for a formatted text.</p> Source code in <code>flexitext/text.py</code> <pre><code>class Text:\n    \"\"\"Stores content and styles for a formatted text.\"\"\"\n\n    def __init__(self, string, style=None):\n        self.string = string\n        self.style = style\n\n    def __repr__(self):\n        return self.string\n\n    def __eq__(self, other):\n        if not isinstance(other, type(self)):\n            return False\n        return self.string == other.string and self.style == other.style\n</code></pre>"},{"location":"reference/flexitext/","title":"flexitext","text":"<p>Draw text with multiple formats.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>The horizontal position to place the text. By default, this is in axes fraction coordinates.</p> required <code>y</code> <code>float</code> <p>The vertical position to place the text. By default, this is in axes fraction coordinates.</p> required <code>ha</code> <code>str</code> <p>Horizontal alignment. Must be one of <code>'center'</code>, <code>'right'</code>, or <code>'left'</code>.</p> <code>'left'</code> <code>va</code> <code>str</code> <p>Horizontal alignment. Must be one of <code>'center'</code>, <code>'top'</code>, or <code>'bottom'</code>.</p> <code>'center'</code> <code>ma</code> <code>str</code> <p>Alignment for multiline texts. The layout of the bounding box of all the lines is determined by the <code>ha</code> and <code>va</code> properties. This property controls the alignment of the text lines within that box.</p> <code>'left'</code> <code>mva</code> <code>str</code> <p>Vertical alignment for text within multiline texts. Can be one of <code>\"top\"</code>, <code>\"bottom\"</code>, <code>\"left\"</code>, <code>\"right\"</code>, <code>\"center\"</code>, or <code>\"baseline\"</code>. Defaults to <code>\"baseline\"</code>.</p> <code>'baseline'</code> <code>xycoords</code> <code>str</code> <p>The coordinate system for <code>x</code> and <code>y</code>. Must be one of <code>'axes fraction'</code> or <code>'figure fraction'</code>.</p> <code>'axes fraction'</code> <code>ax</code> <code>Axes</code> <p>Matplotlib <code>Axes</code>. The default value means the <code>Axes</code> is obtained with <code>plt.gca()</code>.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>annotation_box</code> <code>AnnotationBbox</code> Source code in <code>flexitext/flexitext.py</code> <pre><code>def flexitext(\n    x,\n    y,\n    s,\n    ha=\"left\",\n    va=\"center\",\n    ma=\"left\",\n    mva=\"baseline\",\n    xycoords=\"axes fraction\",\n    ax=None,\n):\n    \"\"\"Draw text with multiple formats.\n\n    Parameters\n    ----------\n    x : float\n        The horizontal position to place the text. By default, this is in axes fraction\n        coordinates.\n    y : float\n        The vertical position to place the text. By default, this is in axes fraction\n        coordinates.\n    ha : str\n        Horizontal alignment. Must be one of `'center'`, `'right'`, or `'left'`.\n    va : str\n        Horizontal alignment. Must be one of `'center'`, `'top'`, or `'bottom'`.\n    ma : str\n        Alignment for multiline texts. The layout of the bounding box of all the lines is\n        determined by the `ha` and `va` properties. This property controls the alignment of the\n        text lines within that box.\n    mva : str\n        Vertical alignment for text within multiline texts. Can be one of `\"top\"`, `\"bottom\"`,\n        `\"left\"`, `\"right\"`, `\"center\"`, or `\"baseline\"`. Defaults to `\"baseline\"`.\n    xycoords : str\n        The coordinate system for `x` and `y`. Must be one of `'axes fraction'` or\n        `'figure fraction'`.\n    ax : matplotlib.axes.Axes\n        Matplotlib `Axes`. The default value means the `Axes` is obtained with `plt.gca()`.\n\n    Returns\n    -------\n    annotation_box : matplotlib.offsetbox.AnnotationBbox\n    \"\"\"\n    return FlexiText(*make_texts(s)).plot(x, y, ha, va, ma, mva, xycoords, ax)\n</code></pre>"},{"location":"usage/","title":"Overview","text":"<p>Flexitext provides two interfaces to draw text with a variety of styles in Matplotlib plots.</p> <ul> <li>Functional: Takes a formatted string and draws the formatted text. This parses the formatted string and then uses classes from the OOP interface under the hood.</li> <li>Object-Oriented: This does not involve any parsing step, but requires you to create the text objects either by hand or programatically. This is useful if you want to re-use styles without having to manipulate Python strings.</li> </ul>"},{"location":"usage/OOP/","title":"Object-Oriented Interface","text":"<p>Flexitext provides the <code>FlexiText()</code> class. This class is wrapped by the <code>flexitext()</code> function to provide the functional implementation. Unlike the functional implementation, this class based implementation does not work with formatted strings. It works with instances of the class <code>flexitext.Text</code>. These are lower level objects that contain both the text and the styles, given by an instance of <code>flexitext.Style</code>.</p>"},{"location":"usage/OOP/#setup","title":"Setup","text":"<pre><code>import matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom flexitext import FlexiText, Style\n\nmpl.rcParams[\"figure.figsize\"] = (6, 4)\nmpl.rcParams[\"figure.dpi\"] = 120\n</code></pre>"},{"location":"usage/OOP/#style-class","title":"<code>Style</code> class","text":"<p>The <code>Style</code> class stores styles that are applied to some text. Its arguments are the names of the styles supported (see here). </p> <pre><code>style = Style(color=\"blueviolet\", size=18, name=\"Montserrat\")\nprint(style)\n</code></pre> <pre><code>Style(color=blueviolet, name=Montserrat, size=18)\n</code></pre> <p>This style object can be called with a string we would like to format and it returns an instance of <code>flexitext.Text</code>.</p> <pre><code>text = style(\"Styled text\")\nprint(text)\n</code></pre> <pre><code>Styled text\n</code></pre> <pre><code>print(text.style)\n</code></pre> <pre><code>Style(color=blueviolet, name=Montserrat, size=18)\n</code></pre>"},{"location":"usage/OOP/#flexitext-class","title":"<code>FlexiText</code> class","text":"<p><code>FlexiText</code> objects are created with a variable number of <code>Text</code> objects. Then we call the <code>.plot()</code> method, which accepts the same arguments than <code>flexitext()</code>, and draw the all the texts with their corresponding styles.</p> <pre><code>fig, ax = plt.subplots()\n\nFlexiText(text).plot(0.5, 0.5, ha=\"center\");\n</code></pre> <p></p> <p>This interface allows us to re-use styles.</p> <pre><code>style2 = Style(size=14, name=\"Montserrat\")\n\nfig, ax = plt.subplots()\n\nft = FlexiText(\n    style(\"Styled text\\n\"), \n    style2(\"Another style\\n\"), \n    style(\"Reuse original style\")\n)\n\nft.plot(0.5, 0.5, ha=\"center\");\n</code></pre> <p></p>"},{"location":"usage/OOP/#more-examples","title":"More examples","text":"<p>The object-oriented interface is useful when you want to create styles in a programatically way without dealing with strings and when you want to re-use those styles. Let's see an example:</p> <pre><code>RAINBOW_COLORS = [\"#FF6663\", \"#FEB144\", \"#FDFD97\", \"#9EE09E\", \"#9EC1CF\", \"#CC99C9\", \"#CCA0F0\"]\n\n# Create list of styles\nstyles = [Style(size=72, color=color, name=\"Gluten\", weight=600) for color in RAINBOW_COLORS]\n\n# Create lists of texts\ntexts1 = [s(letter) for s, letter in zip(styles, \"Rainbow\")]\ntexts2 = [s(letter) for s, letter in zip(styles, \"Palette\")]\n\n# Create plot\nfig, ax = plt.subplots()\nFlexiText(*texts1).plot(0.5, 0.65, ha=\"center\");\nFlexiText(*texts2).plot(0.5, 0.35, ha=\"center\");\n</code></pre> <p></p>"},{"location":"usage/functional/","title":"Functional interface","text":"<p>Flexitext provides the <code>flexitext()</code> function. With the exception of the formatted strings, it works in the same way than the <code>.text()</code> method on Matplotlib's <code>Axes</code> objects. You can see its full documentation here.</p>"},{"location":"usage/functional/#setup","title":"Setup","text":"<pre><code>import matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom flexitext import flexitext\n\nmpl.rcParams[\"figure.figsize\"] = (6, 4)\nmpl.rcParams[\"figure.dpi\"] = 120\n</code></pre>"},{"location":"usage/functional/#formatted-strings","title":"Formatted strings","text":"<p>Albeit being inspired on ggtext, Flexitext does not use HTML, CSS, or Markdown to specify text styles. On the contrary, it implements a tag-based styling that looks similar to HTML tags, but is not exactly like HTML. These formatted strings consist of three components:</p> <ul> <li>An opening tag that defines the styles to apply.</li> <li>The text to be styled.</li> <li>A closing tag, indicating the extent to which the styles in the opening tag apply.</li> </ul> <p>Let's see an example:</p> <pre><code>\"&lt;color:blue, size:16&gt;This is blue text&lt;/&gt; and this is regular text\"\n</code></pre> <ul> <li><code>&lt;color:blue, size:16&gt;</code> is the opening tag. Styles are key-value pairs separated by <code>:</code>. Multiple styles are separated by commas.</li> <li><code>This is blue text</code> is the text block. This text is going to be drawn using a font size of 16 and blue color.</li> <li><code>&lt;/&gt;</code> is the closing tag. Only the text within the opening and the closing tags is formatted.</li> </ul> <p>And finally we have <code>and this is regular text</code>. This is going to be drawn using the default style because it is not contained within any formatting tags.</p> <pre><code>fig, ax = plt.subplots()\n\ntext = \"&lt;color:blue, size:16&gt;This is blue text&lt;/&gt; and this is regular text\"\nflexitext(0.5, 0.5, text, ha=\"center\");\n</code></pre> <p></p> <p>Additionally, styles can be nested. If you define a styled block within the text component of an other styled block, the inner is formatted according to the combination of both styles. For example:</p> <pre><code>fig, ax = plt.subplots()\n\ntext = \"&lt;color:blue, size:16&gt;Everything is blue, but &lt;weight:bold&gt;this is also bold&lt;/&gt;&lt;/&gt;\"\nflexitext(0.5, 0.5, text, ha=\"center\");\n</code></pre> <p></p> <p>Notice the innermost style overrides settings from the outer one.</p> <pre><code>fig, ax = plt.subplots()\n\ntext = \"&lt;color:blue, weight:bold&gt;Everything is bold, &lt;color:red&gt;but this is red&lt;/&gt;&lt;/&gt;\"\nflexitext(0.5, 0.5, text, ha=\"center\");\n</code></pre> <p></p>"},{"location":"usage/functional/#more-examples","title":"More examples","text":"<p>Flexitext supports a variety of styles. You can change color, transparency, font, style, weight, etc. The following examples showcase how to customize text in different ways using <code>flexitext()</code> and formatted strings.</p> <pre><code>fig, ax = plt.subplots()\n\nflexitext(\n    0.05, 0.9, \n    \"&lt;size:14, color:#ff5c67&gt;Mix &lt;weight:bold&gt;bold&lt;/&gt; and &lt;weight:light&gt;light&lt;/&gt;&lt;/&gt;\"\n)\n\nflexitext(\n    0.05, 0.8, \n    \"&lt;size:12&gt;Highlight &lt;weight:bold, color:#64a5ff&gt;information&lt;/&gt;&lt;/&gt;\"\n)\n\n\ntext = (\n    \"&lt;size:12, name:Lato&gt;Use breaklines\\n\"\n    \"and make text\\n&lt;size:36&gt;BIGGER&lt;/&gt;\\n\"\n    \"&lt;size:12&gt;and also smaller&lt;/&gt;&lt;/&gt;\"\n)\n\nflexitext(\n    0.5, 0.5, \n    text,\n    ha=\"center\",\n    ma=\"center\"\n)\n\ntext = (\n    \"&lt;size:18, name:Lobster Two&gt;Align text as \"\n    \"&lt;color:#ffb382, weight:bold, name:Special Elite&gt;usual&lt;/&gt;&lt;/&gt;\"\n)\n\nflexitext(\n    1, 0, \n    text,\n    ha=\"right\",\n    va=\"bottom\"\n);\n</code></pre> <p></p> <pre><code>fig, ax = plt.subplots()\nfig.subplots_adjust(top=0.8)\n\nflexitext(\n    0, 1, \"&lt;size:22&gt;&lt;color:red&gt;Axes&lt;/&gt; fraction&lt;/&gt;\", \n    va=\"top\"\n);\n\nflexitext(\n    0.9, 0.82, \n    \"&lt;size:22&gt;&lt;color:red&gt;Figure&lt;/&gt; fraction&lt;/&gt;\", \n    va=\"bottom\", ha=\"right\", \n    xycoords=\"figure fraction\"\n)\n\nflexitext(\n    0.9, 0.02, \n    \"Usefool for &lt;style:italic, weight:bold&gt;captions&lt;/&gt;\", \n    ha=\"right\", \n    xycoords=\"figure fraction\"\n)\n\nflexitext(\n    0.5, 0.6, \n    \"&lt;size:22&gt;Some &lt;alpha:0.3&gt;transparency&lt;/&gt;&lt;/&gt;\",\n    ha=\"center\"\n)\n\nflexitext(\n    0.5, 0.4, \n    \"&lt;size:22&gt;And &lt;family:monospace, color:red&gt;monospace&lt;/&gt; too&lt;/&gt;\",\n    ha=\"center\"\n)\n\ntext = \"&lt;size:14&gt;break&lt;/&gt;\\n&lt;size:12&gt;break&lt;/&gt;\\n&lt;size:10&gt;break&lt;/&gt;\"\n\nflexitext(0, 0, text, va=\"bottom\");\n\nflexitext(0.5, 0, text, ha=\"center\", ma=\"center\", va=\"bottom\");\n\nflexitext(1, 0, text, ha=\"right\", ma=\"right\", va=\"bottom\");\n</code></pre> <p></p>"}]}